import { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { collectionsApi } from '../services/api';
import type { Collection } from '../types/api';

interface DeleteConfirmationDialogProps {
  isOpen: boolean;
  collections: Collection[];
  onConfirm: () => void;
  onCancel: () => void;
}

function DeleteConfirmationDialog({ isOpen, collections, onConfirm, onCancel }: DeleteConfirmationDialogProps) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
      <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div className="mt-3 text-center">
          <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
            <svg className="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
            </svg>
          </div>
          <h3 className="text-lg leading-6 font-medium text-gray-900">Delete Collections</h3>
          <div className="mt-2 px-7 py-3">
            <p className="text-sm text-gray-500">
              Are you sure you want to delete {collections.length} collection{collections.length > 1 ? 's' : ''}? This action cannot be undone and will also delete all fields in the collection{collections.length > 1 ? 's' : ''}.
            </p>
            <div className="mt-4 max-h-32 overflow-y-auto">
              <ul className="text-left text-sm text-gray-700">
                {collections.map((collection) => (
                  <li key={collection.id} className="py-1">â€¢ {collection.name}</li>
                ))}
              </ul>
            </div>
          </div>
          <div className="items-center px-4 py-3 flex justify-center space-x-4">
            <button
              onClick={onCancel}
              className="px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md shadow-sm hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-300"
            >
              Cancel
            </button>
            <button
              onClick={onConfirm}
              className="px-4 py-2 bg-red-600 text-white text-base font-medium rounded-md shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500"
            >
              Delete
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

export default function Collections() {
  const [collections, setCollections] = useState<Collection[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCollections, setSelectedCollections] = useState<Set<number>>(new Set());
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [deleting, setDeleting] = useState(false);

  useEffect(() => {
    loadCollections();
  }, []);

  const loadCollections = async () => {
    try {
      setLoading(true);
      const data = await collectionsApi.list();
      setCollections(data);
    } catch (err: any) {
      setError(err.response?.data?.detail || 'Failed to load collections');
    } finally {
      setLoading(false);
    }
  };

  // Search function across collections and fields
  const filteredCollections = collections.filter(collection => {
    if (!searchTerm) return true;
    
    const term = searchTerm.toLowerCase();
    
    // Search collection name and description
    if (collection.name.toLowerCase().includes(term) || 
        collection.description?.toLowerCase().includes(term)) {
      return true;
    }
    
    // Search in field names, types, and field values (if fields exist)
    if (collection.fields && collection.fields.length > 0) {
      return collection.fields.some(field => 
        field.field_name.toLowerCase().includes(term) ||
        field.value_type.toLowerCase().includes(term) ||
        (field.fixed_value_text && field.fixed_value_text.toLowerCase().includes(term)) ||
        (field.fixed_value_number && field.fixed_value_number.toString().includes(term)) ||
        (field.fixed_value_float && field.fixed_value_float.toString().includes(term)) ||
        (field.range_start_number && field.range_start_number.toString().includes(term)) ||
        (field.range_end_number && field.range_end_number.toString().includes(term)) ||
        (field.range_start_float && field.range_start_float.toString().includes(term)) ||
        (field.range_end_float && field.range_end_float.toString().includes(term)) ||
        (field.start_number && field.start_number.toString().includes(term)) ||
        (field.step_number && field.step_number.toString().includes(term)) ||
        (field.reset_number && field.reset_number.toString().includes(term))
      );
    }
    
    return false;
  });

  const getSearchMatchType = (collection: Collection) => {
    if (!searchTerm) return null;
    const term = searchTerm.toLowerCase();
    
    if (collection.name.toLowerCase().includes(term) || 
        collection.description?.toLowerCase().includes(term)) {
      return 'collection';
    }
    
    return 'field';
  };

  const toggleSelection = (collectionId: number) => {
    const newSelected = new Set(selectedCollections);
    if (newSelected.has(collectionId)) {
      newSelected.delete(collectionId);
    } else {
      newSelected.add(collectionId);
    }
    setSelectedCollections(newSelected);
  };

  const toggleSelectAll = () => {
    if (selectedCollections.size === filteredCollections.length) {
      setSelectedCollections(new Set());
    } else {
      setSelectedCollections(new Set(filteredCollections.map(c => c.id)));
    }
  };

  const handleDeleteClick = () => {
    setShowDeleteDialog(true);
  };

  const handleDeleteConfirm = async () => {
    const selectedIds = Array.from(selectedCollections);
    setDeleting(true);
    
    try {
      if (selectedIds.length === 1) {
        // Single delete
        await collectionsApi.delete(selectedIds[0]);
      } else {
        // Bulk delete
        await collectionsApi.bulkDelete(selectedIds);
      }
      
      await loadCollections(); // Reload collections
      setSelectedCollections(new Set()); // Clear selection
      setShowDeleteDialog(false);
    } catch (err: any) {
      setError(err.response?.data?.detail || 'Failed to delete collections');
    } finally {
      setDeleting(false);
    }
  };

  const handleDeleteCancel = () => {
    setShowDeleteDialog(false);
  };

  const selectedCollectionObjects = collections.filter(c => selectedCollections.has(c.id));

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="text-gray-600">Loading collections...</div>
      </div>
    );
  }

  return (
    <div>
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Collections</h1>
            <p className="mt-2 text-gray-600">
              Manage your data collections and their field structures
            </p>
          </div>
          <div className="flex space-x-3">
            {selectedCollections.size > 0 && (
              <button
                onClick={handleDeleteClick}
                disabled={deleting}
                className="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {deleting ? 'Deleting...' : `Delete Selected (${selectedCollections.size})`}
              </button>
            )}
            <Link
              to="/collections/new"
              className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            >
              New Collection
            </Link>
          </div>
        </div>
      </div>

      {/* Search Bar and Selection Controls */}
      <div className="mb-6">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-4">
            {filteredCollections.length > 0 && (
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={selectedCollections.size === filteredCollections.length}
                  onChange={toggleSelectAll}
                  className="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
                />
                <span className="ml-2 text-sm text-gray-700">Select All</span>
              </label>
            )}
            {selectedCollections.size > 0 && (
              <span className="text-sm text-gray-600">
                {selectedCollections.size} selected
              </span>
            )}
          </div>
        </div>
        
        <div className="relative">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
          <input
            id="search"
            name="search"
            className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Search collections and fields..."
            type="search"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        {searchTerm && (
          <p className="mt-2 text-sm text-gray-600">
            Found {filteredCollections.length} collection{filteredCollections.length !== 1 ? 's' : ''}
          </p>
        )}
      </div>

      {error && (
        <div className="rounded-md bg-red-50 p-4 mb-6">
          <div className="text-sm text-red-700">{error}</div>
        </div>
      )}

      <div className="bg-white shadow rounded-lg">
        <div className="p-6">
          {filteredCollections.length === 0 ? (
            <div className="text-center py-12">
              <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14-7l-14 14" />
              </svg>
              <h3 className="mt-2 text-sm font-medium text-gray-900">No collections</h3>
              <p className="mt-1 text-sm text-gray-500">Get started by creating a new collection.</p>
              <div className="mt-6">
                <Link
                  to="/collections/new"
                  className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
                >
                  <svg className="-ml-1 mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                  New Collection
                </Link>
              </div>
            </div>
          ) : (
            <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
              {filteredCollections.map((collection) => {
                const matchType = getSearchMatchType(collection);
                const isSelected = selectedCollections.has(collection.id);
                
                return (
                <div
                  key={collection.id}
                  className={`relative rounded-lg border p-6 shadow-sm hover:shadow-md transition-shadow ${
                    isSelected 
                      ? "border-blue-500 bg-blue-50" 
                      : matchType 
                        ? "border-blue-300 bg-blue-25" 
                        : "border-gray-300 bg-white"
                  }`}
                >
                  {/* Checkbox */}
                  <div className="absolute top-3 left-3 z-10">
                    <input
                      type="checkbox"
                      checked={isSelected}
                      onChange={(e) => { e.stopPropagation(); toggleSelection(collection.id); }}
                      className="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
                      onClick={(e) => e.stopPropagation()}
                    />
                  </div>

                  {matchType === "field" && searchTerm && (
                    <div className="absolute top-2 right-2">
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                        Match in fields
                      </span>
                    </div>
                  )}

                  <div className="flex items-center space-x-3 ml-8">
                    <div className="flex-shrink-0">
                      <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                        <svg className="w-6 h-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14-7l-14 14" />
                        </svg>
                      </div>
                    </div>
                    <div className="flex-1 min-w-0">
                      <Link to={`/collections/${collection.id}`} className="focus:outline-none">
                        <p className="text-lg font-medium text-gray-900 truncate">{collection.name}</p>
                        <p className="text-sm text-gray-500">
                          {collection.fields?.length || 0} field{(collection.fields?.length || 0) !== 1 ? 's' : ''}
                        </p>
                        {collection.owner_username && (
                          <p className="text-xs text-gray-400">
                            Owner: {collection.owner_username}
                          </p>
                        )}
                      </Link>
                    </div>
                  </div>
                  
                  <div className="mt-4 ml-8">
                    <div className="text-xs text-gray-500">
                      Created: {new Date(collection.created_at).toLocaleDateString()}
                    </div>
                    <div className="text-xs text-gray-500">
                      Updated: {new Date(collection.updated_at).toLocaleDateString()}
                    </div>
                  </div>

                  <div className="mt-4 flex items-center justify-between ml-8">
                    <Link
                      to={`/collections/${collection.id}`}
                      className="text-blue-600 hover:text-blue-500 text-sm font-medium"
                      onClick={(e) => e.stopPropagation()}
                    >
                      View Details
                    </Link>
                    <Link
                      to={`/collections/${collection.id}/edit`}
                      className="text-gray-400 hover:text-gray-600 focus:outline-none focus:text-gray-600"
                      onClick={(e) => e.stopPropagation()}
                    >
                      <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                      </svg>
                    </Link>
                  </div>
                </div>
);})}
            </div>
          )}
        </div>
      </div>

      <DeleteConfirmationDialog
        isOpen={showDeleteDialog}
        collections={selectedCollectionObjects}
        onConfirm={handleDeleteConfirm}
        onCancel={handleDeleteCancel}
      />
    </div>
  );
}
